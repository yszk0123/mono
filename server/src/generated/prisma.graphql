# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Paragraph implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  title: String!
  text: String!
  story(where: ParagraphWhereInput): Paragraph
  author(where: UserWhereInput): User!
}

type Tag implements Node {
  id: ID!
  text: String!
  category(where: TagWhereInput): Tag
  author(where: UserWhereInput): User!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  paragraphs(where: ParagraphWhereInput, orderBy: ParagraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Paragraph!]
}


#
# Other Types
#

type AggregateParagraph {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createParagraph(data: ParagraphCreateInput!): Paragraph!
  createTag(data: TagCreateInput!): Tag!
  createUser(data: UserCreateInput!): User!
  updateParagraph(data: ParagraphUpdateInput!, where: ParagraphWhereUniqueInput!): Paragraph
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteParagraph(where: ParagraphWhereUniqueInput!): Paragraph
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteUser(where: UserWhereUniqueInput!): User
  upsertParagraph(where: ParagraphWhereUniqueInput!, create: ParagraphCreateInput!, update: ParagraphUpdateInput!): Paragraph!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyParagraphs(data: ParagraphUpdateInput!, where: ParagraphWhereInput!): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyParagraphs(where: ParagraphWhereInput!): BatchPayload!
  deleteManyTags(where: TagWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ParagraphConnection {
  pageInfo: PageInfo!
  edges: [ParagraphEdge]!
  aggregate: AggregateParagraph!
}

input ParagraphCreateInput {
  title: String!
  text: String!
  tags: TagCreateManyInput
  story: ParagraphCreateOneWithoutStoryInput
  author: UserCreateOneWithoutParagraphsInput!
}

input ParagraphCreateManyWithoutAuthorInput {
  create: [ParagraphCreateWithoutAuthorInput!]
  connect: [ParagraphWhereUniqueInput!]
}

input ParagraphCreateOneWithoutStoryInput {
  create: ParagraphCreateWithoutStoryInput
  connect: ParagraphWhereUniqueInput
}

input ParagraphCreateWithoutAuthorInput {
  title: String!
  text: String!
  tags: TagCreateManyInput
  story: ParagraphCreateOneWithoutStoryInput
}

input ParagraphCreateWithoutStoryInput {
  title: String!
  text: String!
  tags: TagCreateManyInput
  author: UserCreateOneWithoutParagraphsInput!
}

type ParagraphEdge {
  node: Paragraph!
  cursor: String!
}

enum ParagraphOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type ParagraphPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
}

type ParagraphSubscriptionPayload {
  mutation: MutationType!
  node: Paragraph
  updatedFields: [String!]
  previousValues: ParagraphPreviousValues
}

input ParagraphSubscriptionWhereInput {
  AND: [ParagraphSubscriptionWhereInput!]
  OR: [ParagraphSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParagraphWhereInput
}

input ParagraphUpdateInput {
  title: String
  text: String
  tags: TagUpdateManyInput
  story: ParagraphUpdateOneWithoutStoryInput
  author: UserUpdateOneWithoutParagraphsInput
}

input ParagraphUpdateManyWithoutAuthorInput {
  create: [ParagraphCreateWithoutAuthorInput!]
  connect: [ParagraphWhereUniqueInput!]
  disconnect: [ParagraphWhereUniqueInput!]
  delete: [ParagraphWhereUniqueInput!]
  update: [ParagraphUpdateWithoutAuthorInput!]
  upsert: [ParagraphUpsertWithoutAuthorInput!]
}

input ParagraphUpdateOneWithoutStoryInput {
  create: ParagraphCreateWithoutStoryInput
  connect: ParagraphWhereUniqueInput
  disconnect: ParagraphWhereUniqueInput
  delete: ParagraphWhereUniqueInput
  update: ParagraphUpdateWithoutStoryInput
  upsert: ParagraphUpsertWithoutStoryInput
}

input ParagraphUpdateWithoutAuthorDataInput {
  title: String
  text: String
  tags: TagUpdateManyInput
  story: ParagraphUpdateOneWithoutStoryInput
}

input ParagraphUpdateWithoutAuthorInput {
  where: ParagraphWhereUniqueInput!
  data: ParagraphUpdateWithoutAuthorDataInput!
}

input ParagraphUpdateWithoutStoryDataInput {
  title: String
  text: String
  tags: TagUpdateManyInput
  author: UserUpdateOneWithoutParagraphsInput
}

input ParagraphUpdateWithoutStoryInput {
  where: ParagraphWhereUniqueInput!
  data: ParagraphUpdateWithoutStoryDataInput!
}

input ParagraphUpsertWithoutAuthorInput {
  where: ParagraphWhereUniqueInput!
  update: ParagraphUpdateWithoutAuthorDataInput!
  create: ParagraphCreateWithoutAuthorInput!
}

input ParagraphUpsertWithoutStoryInput {
  where: ParagraphWhereUniqueInput!
  update: ParagraphUpdateWithoutStoryDataInput!
  create: ParagraphCreateWithoutStoryInput!
}

input ParagraphWhereInput {
  AND: [ParagraphWhereInput!]
  OR: [ParagraphWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  story: ParagraphWhereInput
  author: UserWhereInput
}

input ParagraphWhereUniqueInput {
  id: ID
}

type Query {
  paragraphs(where: ParagraphWhereInput, orderBy: ParagraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Paragraph]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  paragraph(where: ParagraphWhereUniqueInput!): Paragraph
  tag(where: TagWhereUniqueInput!): Tag
  user(where: UserWhereUniqueInput!): User
  paragraphsConnection(where: ParagraphWhereInput, orderBy: ParagraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParagraphConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  paragraph(where: ParagraphSubscriptionWhereInput): ParagraphSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  text: String!
  category: TagCreateOneWithoutCategoryInput
  author: UserCreateOneInput!
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOneWithoutCategoryInput {
  create: TagCreateWithoutCategoryInput
  connect: TagWhereUniqueInput
}

input TagCreateWithoutCategoryInput {
  text: String!
  author: UserCreateOneInput!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TagPreviousValues {
  id: ID!
  text: String!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  text: String
  category: TagUpdateOneWithoutCategoryInput
  author: UserUpdateOneInput
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
}

input TagUpdateOneWithoutCategoryInput {
  create: TagCreateWithoutCategoryInput
  connect: TagWhereUniqueInput
  disconnect: TagWhereUniqueInput
  delete: TagWhereUniqueInput
  update: TagUpdateWithoutCategoryInput
  upsert: TagUpsertWithoutCategoryInput
}

input TagUpdateWithoutCategoryDataInput {
  text: String
  author: UserUpdateOneInput
}

input TagUpdateWithoutCategoryInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutCategoryDataInput!
}

input TagUpsertWithoutCategoryInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutCategoryDataInput!
  create: TagCreateWithoutCategoryInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  category: TagWhereInput
  author: UserWhereInput
}

input TagWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  paragraphs: ParagraphCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutParagraphsInput {
  create: UserCreateWithoutParagraphsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutParagraphsInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  paragraphs: ParagraphUpdateManyWithoutAuthorInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
}

input UserUpdateOneWithoutParagraphsInput {
  create: UserCreateWithoutParagraphsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutParagraphsInput
  upsert: UserUpsertWithoutParagraphsInput
}

input UserUpdateWithoutParagraphsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutParagraphsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutParagraphsDataInput!
}

input UserUpsertWithoutParagraphsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutParagraphsDataInput!
  create: UserCreateWithoutParagraphsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  paragraphs_every: ParagraphWhereInput
  paragraphs_some: ParagraphWhereInput
  paragraphs_none: ParagraphWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
